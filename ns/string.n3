#  Schema for string built-in functions in cwm. 

@prefix cc: <http://creativecommons.org/ns#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@prefix string:  <http://www.w3.org/2000/10/swap/string#> .

<> a owl:Ontology ;
   rdfs:label "String Processing Ontology";
   rdfs:comment """This is an ontology for computable string functions.
It is implemented, for example, in CWM and Euler.""";
   cc:license <http://www.w3.org/Consortium/Legal/copyright-software>;
   skos:historyNote "Schema for string built-in functions in cwm.".

# Concat is backwards!
string:concat a owl:InverseFunctionalProperty;   # obj = list of string to string
    rdfs:label "is concatenation of";
    rdfs:comment "";
    skos:note "(obsolete - (was backwards!) - use: string:concatenation)";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:List;
    vs:term_status "deprecated";
    owl:inverse string:concatenation;  # Use that instead for new designs
    rdfs:isDefinedBy <>.

string:concatenation a owl:FunctionalProperty;
    rdfs:label "is the concatenation of the strings in";
    rdfs:comment  """The subject is a list of strings.
The object is calculated as a concatenation of those strings.""";
    skos:example "";
    rdfs:domain log:List;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:format a owl:FunctionalProperty;
    rdfs:label "is the string formatted function of";
    rdfs:comment  """The subject is a list, whose first member is a format string,
and whose remaining members are arguments to the format string.
The object is calculated from the subject.""";
    skos:note """The formating string is in the style of python's % operator,
very similar to C's sprintf().
""";
    skos:example "";
    rdfs:domain log:List;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:greaterThan a rdf:Property;
    rdfs:label  "is greater than";
    rdfs:comment  "True iff the string is greater than the object when ordered according to Unicode(tm) code order.";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:notGreaterThan a rdf:Property;
    rdfs:label  "is not greater than";
    rdfs:comment  "True iff the string is NOT greater than the object when ordered according to Unicode(tm) code order.";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:lessThan a rdf:Property;
    rdfs:label  "is less than";
    rdfs:comment  "True iff the string is less than the object when ordered according to Unicode(tm) code order.";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:notLessThan a rdf:Property;
    rdfs:label  "is not less than";
    rdfs:comment  "True iff the string is NOT less than the object when ordered according to Unicode(tm) code order.";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:startsWith a rdf:Property;
    rdfs:label  "starts with";
    rdfs:comment  "True iff the subject string starts with the object string.";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:endsWith a rdf:Property;  
    rdfs:label  "ends with";
    rdfs:comment  "True iff the subject string ends with the object string.";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:contains a rdf:Property;
    rdfs:label  "contains";
    rdfs:comment  "True iff the subject string contains the object string.";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:containsIgnoringCase a rdf:Property;
    rdfs:label  "contains";
    rdfs:comment  """True iff the subject string contains the object string,
with the comparison done ignoring the difference between upper case and
lower case characters.""";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:equalIgnoringCase a rdf:Property;
    rdfs:label  "contains";
    rdfs:comment  """True iff the subject string is the same as object string
ignoring differences between upper and lower case.""";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:notEqualIgnoringCase a rdf:Property;
    rdfs:label  "contains";
    rdfs:comment  """True iff the subject string is the NOT same as object string
ignoring differences between upper and lower case.""";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:scrape a rdf:Property;
    rdfs:label  "scrape";
    rdfs:comment  """The subject is a list of two strings. The second string is
a regular expression in the perl, python style.
It must contain one group (a part in parentheses).  If the first string in the list matches
the regular expression, then the object is calculated as being the
part of the first string which matches the group.""";
    skos:example "";
    rdfs:domain log:List;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:replace a rdf:Property;
    rdfs:label  "replace";
    rdfs:comment  """A built-in for replacing characters or sub.
takes a list of 3 strings; the first is the
input data, the second the old and the third the new string.
The object is calculated as the replaced string.""";
    skos:example "(\"fofof bar\", \"of\", \"baz\") string:replace \"fbazbaz bar\"";
    rdfs:domain log:List;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:matches a rdf:Property;
    rdfs:label  "contains";
    rdfs:comment  """The subject is a string;
the object is is a regular expression in the perl, python style.
It is true iff the string matches the regexp.""";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

string:notMatches a rdf:Property; 
    rdfs:label  "contains";
    rdfs:comment  """The subject string;
the object is is a regular expression in the perl, python style.
It is true iff the string does NOT match the regexp.""";
    skos:example "";
    rdfs:domain log:String;
    rdfs:range  log:String;
    rdfs:isDefinedBy <>.

