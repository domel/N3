@prefix cc: <http://creativecommons.org/ns#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@prefix math: <http://www.w3.org/2000/10/swap/math#> .

<> a owl:Ontology ;
   rdfs:label "Schema mathematical built-in functions";
   rdfs:comment """This is an ontology for computable math functions.""";
   cc:license <http://www.w3.org/Consortium/Legal/copyright-software>;
   skos:historyNote """
Schema for CWM's mathematical built-ins, SBP 2001-12

$Id: math.n3,v 1.12 2010-03-30 15:18:08 timbl Exp $
""".

math:StrictProperty a rdfs:Class;
    rdfs:label "StrictProperty";
    rdfs:subClassOf rdf:Property;
    rdfs:comment "The class of things that compare values.";
    rdfs:isDefinedBy <>.

math:Value a rdfs:Class; rdfs:label "Value"; 
   rdfs:subClassOf [owl:unionOf (xsd:decimal xsd:float xsd:double)]; 
   rdfs:comment "The class of things that derive from XSD numeric datatypes.";
   rdfs:isDefinedBy <>.

math:Function a rdfs:Class;
   rdfs:subClassOf owl:FunctionalProperty;
   rdfs:label "Function";
   rdfs:comment "A math:Function is unique in terms of math:EqualTo.";
   rdfs:isDefinedBy <>.

math:ReverseFunction a rdfs:Class;
   rdfs:subClassOf owl:InverseFunctionalProperty;
   rdfs:comment "A math:ReverseFunction is unambiguous in terms of math:EqualTo.";
   rdfs:isDefinedBy <>.

math:LogicalOperator a rdfs:Class; 
   rdfs:subClassOf math:Function, math:ReverseFunction;
   rdfs:comment """A logical operator allows evaluation eihter way, or testing relationship
between two values""";
   rdfs:isDefinedBy <>.

math:List a rdfs:Class; 
   rdfs:label "List"; 
   rdfs:subClassOf log:List; 
   rdfs:comment """The class of things that are N3 lists where all of the 
members are math:Value items.""";
   rdfs:isDefinedBy <>.

math:TwoMemberedList a rdfs:Class; 
   rdfs:label "TwoMemberedList"; 
   rdfs:subClassOf math:List; 
   rdfs:comment "This is the class of things that are math lists with only two members.";
   rdfs:isDefinedBy <>.

math:memberCount a math:Function; rdfs:label "memberCount"; 
   rdfs:domain math:List; rdfs:range math:Value; 
   rdfs:comment """The number of items in a list. The subject is a list,
the object is calculated as the number of members.
Obsolete, see list:length""";
   vs:term_status "deprecated";
   rdfs:isDefinedBy <>.

# Logical operators:

math:greaterThan a rdf:Property, math:StrictProperty;
    rdfs:label "greaterThan"; 
    rdfs:comment "True iff the subject is a number which is greater than the object.";
    skos:example "";
    rdfs:domain math:Value; 
    rdfs:range math:Value;
    rdfs:isDefinedBy <>.

math:notGreaterThan a rdf:Property, math:StrictProperty;
    rdfs:label "notGreaterThan"; 
    rdfs:comment "True iff the subject is a number which is NOT greater than the object.";
    skos:example "";
    rdfs:domain math:Value; 
    rdfs:range math:Value;
    rdfs:isDefinedBy <>.

math:lessThan a rdf:Property, math:StrictProperty;
    rdfs:label "lessThan"; 
    rdfs:comment "True iff the subject is a number which is LESS than a object.";
    skos:example "";
    rdfs:domain math:Value; rdfs:range math:Value;
    rdfs:isDefinedBy <>.

math:notLessThan a rdf:Property, math:StrictProperty;
    rdfs:label "notlessThan"; 
    rdfs:comment "True iff the subject is a number which is NOT LESS than a object.";
    skos:example "";
    rdfs:domain math:Value; 
    rdfs:range math:Value;
    rdfs:isDefinedBy <>.

math:equalTo a rdf:Property, math:StrictProperty;
    rdfs:label "equalTo"; 
    rdfs:comment "";
    skos:note """**schema**:
`$a1 math:equalTo $a2`

**summary**:
checks equality of numbers

**definition**:
`true` if and only if `$a1` is equal to `$a2`. 
Requires both arguments to be either concrete numerals, or variables bound to a numeral.

**literal domains**:

* `$a1`: `xs:decimal` (or its derived types), `xs:float`, or `xs:double`  (see note on type promotion, and casting from string)
* `$a2`: `xs:decimal` (or its derived types), `xs:float`, or `xs:double`  (see note on type promotion, and casting from string)""";
    skos:example "";
    rdfs:domain math:Value; 
    rdfs:range math:Value;
    rdfs:isDefinedBy <>.

math:notEqualTo a rdf:Property, math:StrictProperty;
    rdfs:label "notEqualTo"; 
    rdfs:comment "True iff the subject is a number which is NOT EQUAL to a object.";
    skos:example "";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:isDefinedBy <>.

math:sum a rdf:Property, math:Function;
    rdfs:label "sum";
    rdfs:domain log:List;
    rdfs:range math:Value;
    rdfs:comment "";
    skos:note """**schema**:
`($a_1 .. $a_n) math:sum $a_s`

**summary**:
performs addition of numbers

**definition**:
`true` if and only if the arithmetic sum of `$a_1, .. $a_n` equals `$a_s`.
Requires either:

1. all `$a_1, .., $a_n` to be bound; or
2. all but one `$a_i` (subject list) to be bound, and `$a_s` to be bound.

**literal domains**:

* `$a_1 .. $a_n` : `xs:decimal` (or its derived types), `xs:float`, or `xs:double` (see note on type promotion, and casting from string)
* `$a_s`: `xs:decimal` (or its derived types), `xs:float`, or `xs:double` (see note on type promotion, and casting from string)""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:difference a rdf:Property, math:Function;
    rdfs:label "difference";
    rdfs:domain math:TwoMemberedList;
    rdfs:range math:Value;
    rdfs:comment """The subject is a pair of numbers. The object
is calculated by subtracting the second number of the pair from the first.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:product a rdf:Property, math:Function;
    rdfs:label "product";
    rdfs:domain math:List;
    rdfs:range math:Value;
    rdfs:comment """The subject is a list of numbers.
The object is calculated as the arithmentic product of those numbers.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:quotient a rdf:Property, math:Function;
    rdfs:label "quotient";
    rdfs:domain math:TwoMemberedList;
    rdfs:range math:Value;
    rdfs:comment """The subject is a pair of numbers. The object
is calculated by dividing the first number of the pair by the second.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:integerQuotient a rdf:Property, math:Function;
    rdfs:label "integerQuotient";
    rdfs:domain math:TwoMemberedList;
    rdfs:range math:Value;
    rdfs:comment """The subject is a pair of numbers. The object
is calculated by dividing the first number of the pair by the second, ignoring remainder.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:remainder a rdf:Property, math:Function;
    rdfs:label "remainder";
    rdfs:domain math:TwoMemberedList;
    rdfs:range math:Value;
    rdfs:comment """The subject is a pair of integers. The object
is calculated by dividing the first number of the pair by the second and taking the remainder.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:exponentiation a rdf:Property, math:Function;
    rdfs:label "exponentiation";
    rdfs:domain math:TwoMemberedList;
    rdfs:range math:Value;
    rdfs:comment """The subject is a pair of numbers. The object
is calculated by raising the first number of the power of the second.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:negation a rdf:Property, math:Function;
    rdfs:label "negation";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment "The subject or object is calculated to be the negation of the other.";
    skos:example "";
    rdfs:isDefinedBy <>.

math:absoluteValue a rdf:Property, math:Function;
    rdfs:label "negation";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment "The object is calulated as the absolute value of the subject.";
    skos:example "";
    rdfs:isDefinedBy <>.

math:rounded a rdf:Property, math:Function;
    rdfs:label "rounded";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment "The object is calulated as the subject rounded to the nearest integer.";
    skos:example "";
    rdfs:isDefinedBy <>.

# 
# Here start the trigonometric functions - karl dubost
#
#  Inverse functions are implemented by using the function backwards
#  eg for  x math:asin y   say   x is math:sin of y

#math:acos a rdf:Property;
#   rdfs:label "acos";
#   rdfs:range math:Value;
#   rdfs:domain math:Value;
#   rdfs:comment
#"""The object is calulated as the arc cosine value of the subject.""".

#math:asin a rdf:Property;
#   rdfs:label "asin";
#   rdfs:range math:Value;
#   rdfs:domain math:Value;
#   rdfs:comment
#"""The object is calulated as the arc sine value of the subject.""".

#math:atan a rdf:Property;
#   rdfs:label "atan";
#   rdfs:range math:Value;
#   rdfs:domain math:Value;
#   rdfs:comment
#"""The object is calulated as the arc tangent value of the subject.""".

#math:atan2 a math:Function;
#   rdfs:label "atan2";
#   rdfs:range math:Value;
#   rdfs:domain math:Value;
#   rdfs:comment
#"""The subject is a pair of numbers. The object is calulated as the arc tangent value of the ratio of the two subject values.""".

math:cos a rdf:Property, math:LogicalOperator;
    rdfs:label "cos";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment """The subject is an angle expressed in radians.
The object is calulated as the cosine value of the subject.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:cosh a rdf:Property, math:LogicalOperator;
    rdfs:label "cosh";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment """The subject is an angle expressed in radians.
The object is calulated as the #hyperbolic cosine value of the subject.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:degrees a rdf:Property, math:LogicalOperator;
    rdfs:label "degrees";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment """The subject is an angle expressed in radians.
The object is calulated as the conversion in degrees of the value of the subject.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:sin a rdf:Property, math:LogicalOperator;
    rdfs:label "sin";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment """The subject is an angle expressed in radians.
The object is calulated as the sine value of the subject.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:sinh a rdf:Property, math:LogicalOperator;
    rdfs:label "sinh";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment """The subject is an angle expressed in radians.
The object is calulated as the hyperbolic sine value of the subject.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:tan a rdf:Property, math:LogicalOperator;
    rdfs:label "tan";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment """The subject is an angle expressed in radians.
The object is calulated as the tangent value of the subject.""";
    skos:example "";
    rdfs:isDefinedBy <>.

math:tanh a rdf:Property, math:LogicalOperator;
    rdfs:label "tanh";
    rdfs:domain math:Value;
    rdfs:range math:Value;
    rdfs:comment """The subject is an angle expressed in radians.
The object is calulated as the hyperbolic tangent value of the subject.""";
    skos:example "";
    rdfs:isDefinedBy <>.


